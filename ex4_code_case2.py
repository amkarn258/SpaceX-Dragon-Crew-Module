# -*- coding: utf-8 -*-
"""ex4_code_case2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nfgkgAJNbQTL9CrIeisUkA6stpzu05au
"""

from sympy.solvers import solve
import numpy as np
from sympy import *
from sympy import symbol
import matplotlib.pyplot as plt
from scipy.optimize import *
from sympy import asin, oo, pi

k=0.028
#m1=1
#m5=4
l2=7
l1=10
l3=10.5
L=15
l21=2
l11=2.6667
m2=1728.5
m3=2592.7564
m4=3703.9377
M=9616
g=9.81
m=9616
x4=list()
x2=list()
x3=list()
x4dot=list()
x2dot=list()
x3dot=list()
x4ddot=list()
x2ddot=list()
x3ddot=list()
l4=[]
l5=[]
y4=list()
y2=list()
y3=list()
y4dot=list()
y2dot=list()
y3dot=list()
y4ddot=list()
y2ddot=list()
y3ddot=list()
theta=list()
theta2=list()
theta3=list()
theta4=list()
theta2d=list()
theta3d=list()
theta4d=list()
theta2dd=list()
theta3dd=list()
theta4dd=list()
t=np.linspace(0.1,50,200)
R0=[]
R1=[]
R2=[]
R3=[]
R4=[]
R5=[]
R6=[]
R7=[]
R8=[]
P=[]
ti=np.linspace(0.1,50,199)
for i in range(0,len(t)):
  theta2.append(0.1745226+k*t[i])
  theta2d.append(k)
  theta4.append(k*t[i])
  theta4d.append(k)
  theta4dd.append(0)
  theta2dd.append(0)
  #theta.append(k)

#for j in range(0,len(t)):
 # theta[i]=Symbol('T')
 # Eq=(theta[i]-asin(5/2*sin(theta[i])),theta2[i])
 # theta[i]=solve(Eq)
for i in range(0,len(t)):
  theta.append(theta2[i]+1.13446)
  for j in range(0,100):
    F=np.sin(theta[i])/np.sin(theta[i]-theta2[i])-0.75
    Fprime=-np.sin(theta2[i])/(np.sin(theta[i]-theta2[i])**2)
    theta[i]=theta[i]-F/Fprime

for i in range(0,len(t)):
  theta3=theta2-np.arcsin(l1/l3*np.sin(theta2))
  l4.append(l2+l3*np.sin(theta3[i])/np.sin(theta2[i]))
  theta3d.append((l2-l4[i])*np.cos(2*theta2[i])*k/(l3*np.cos(theta3[i]-theta2[i]))) 
  theta3dd.append((l2-l4[i])*((2*np.cos(theta2[i])**2-1)/2*(k)*l3*np.sin(theta3[i]-theta2[i])*(theta3d[i]-k)))
  l5.append(np.sin(theta2[i])/np.sin(theta[i])*l21)

x3ddot=[]
for i in range(0,len(t)):
  x2.append(l2/2*np.cos(theta2[i]))
  x2dot.append(-l2/2*theta2d[i]*np.sin(theta2[i]))
  y2.append(l2/2*np.sin(theta2[i]))
  y2dot.append(l2/2*theta2d[i]*np.cos(theta2[i]))
  x3.append(l2*np.cos(theta2[i])+l3/2*np.cos(theta3[i]))
  x3dot.append(-l2*theta2d[i]*np.sin(theta2[i])-l3/2*theta3d[i]*np.sin(theta3[i]))
  y3.append(l2*np.sin(theta2[i])+l3/2*np.sin(theta3[i]))
  y3dot.append(l2*theta2d[i]*np.cos(theta2[i])+l3/2*theta3d[i]*np.cos(theta3[i]))
  x4.append(l2*np.cos(theta2[i])+l3*np.cos(theta3[i])+L/2*np.cos(theta4[i]))
  y4.append(l2*np.sin(theta[i])+l3*np.sin(theta3[i])+L/2*np.sin(theta4[i]))
  x2ddot.append(-l2/2*(np.cos(theta2[i])*(theta2d[i]**2)+np.sin(theta2[i])*theta2dd[i]))
  y2ddot.append(l2/2*(-np.sin(theta2[i])*(theta2d[i]**2)+np.cos(theta2[i])*theta2dd[i]))
  x3ddot.append(-l2*(np.cos(theta2[i])*(theta2d[i]**2)+np.sin(theta2[i])*theta2dd[i])-l3/2*(np.cos(theta3[i])*(theta3d[i]**2)+np.sin(theta3[i])*theta3dd[i]))
  y3ddot.append(l2*(-np.sin(theta2[i])*(theta2d[i]**2)+np.cos(theta2[i])*theta2dd[i])+l3/2*(-np.sin(theta3[i])*(theta3d[i]**2)+np.cos(theta3[i])*theta3dd[i]))
  x4ddot.append(-l2*(np.cos(theta2[i])*(theta2d[i]**2)+np.sin(theta2[i])*theta2dd[i])-l3*(np.cos(theta3[i])*(theta3d[i]**2)+np.sin(theta3[i])*theta3dd[i])-L/2*(np.cos(theta4[i])*(theta4d[i]**2)+np.sin(theta4[i])*theta4dd[i]))
  y4ddot.append(l2*(-np.sin(theta2[i])*(theta2d[i]**2)+np.cos(theta2[i])*theta2dd[i])+l3*(-np.sin(theta3[i])*(theta3d[i]**2)+np.cos(theta3[i])*theta3dd[i])+L/2*(-np.sin(theta4[i])*(theta4d[i]**2)+np.cos(theta4[i])*theta4dd[i]))

for x in range(0,len(t)):
  A1=[1,0,np.sin(theta2[x]),0,0,0,0,0,0]
  A2=[0,1,-np.cos(theta2[x]),0,0,0,0,0,0]
  A3=[1,0,-np.sin(theta2[x]),-1,0,-np.sin(theta2[x]),0,0,0]
  A4=[0,1,np.cos(theta2[x]),0,-1,np.cos(theta3[x]),0,0,0]
  A5=[0,0,0,1,0,-np.sin(theta3[x]),-1,0,(l4[x]-L/2)*np.sin(theta4[x])]
  A6=[0,0,0,0,1,np.cos(theta3[x]),0,-1,-(l4[x]-L/2)*np.cos(theta4[x])]
  A7=[0,0,0,0,0,0,1,0,L/2]
  A8=[0,0,0,0,0,0,0,1,-L/2]
  A9=[np.cos(theta[x]),np.sin(theta[x]),(1-2*l21/l2)*np.cos(theta[x])*(np.sin(theta2[x])-np.cos(theta2[x])),0,0,0,0,0,0]
  B=[m2*x2dot[x],m2*(y2ddot[x]+g),m2*l2/6*theta2dd[x],m3*x3ddot[x],m3*(y3ddot[x]+g),m3*l3/6*theta3dd[x],m4*x4ddot[x],m4*x4ddot[x]+(M+m4)*g,m4*(L**2)/12*theta4dd[x]+m*g*L/2*np.cos(theta4[x])]
  A=[A1,A2,A3,A4,A5,A6,A7,A8,A9]
  #X=np.linalg.inv(A)
  #R=np.dot(X,B)
  X = np.linalg.solve(A, B)
  R0.append(X[0])
  R1.append(X[1])
  R2.append(X[2])
  R3.append(X[3])
  R4.append(X[4])
  R5.append(X[5])
  R6.append(X[6])
  R7.append(X[7])
  R8.append(X[8])


nf=[]
 # print(R[0])
for x in range(0,len(t)-1):
  P.append(R8[x]*(l5[x+1]-l5[x])/(t[x+1]-t[x]))
  nf.append(R0[x]+R1[x]+R2[x]+R3[x]+R4[x]+R5[x]+R6[x]+R7[x]+R8[x])
plt.plot(t,R0,label=r'$R_1$')
plt.plot(t,R1,label=r'$R_2$')
plt.plot(t,R2,label=r'$R_3$')
plt.plot(t,R3,label=r'$R_4$')
plt.plot(t,R4,label=r'$R_5$')
plt.plot(t,R5,label=r'$R_6$')
plt.plot(t,R6,label=r'$R_7$')
plt.plot(t,R7,label=r'$R_8$')
plt.xlabel('time (in seconds)')
plt.ylabel('Newtons')
plt.legend(loc='best')
plt.show()
plt.plot(t,R8,label=r'$F$')
plt.legend(loc='best')
plt.xlabel('time (in seconds)')
plt.ylabel('Newtons')
plt.show()
#plt.plot(t,x3ddot)
#plt.show()
#plt.plot(t,theta3dd)
#plt.show()
plt.plot(ti,P,label=r'$P$')
plt.legend(loc='best')
plt.xlabel('time (in seconds)')
plt.ylabel('Joules per second')
plt.show()
plt.plot(ti,nf)
plt.xlabel('time (in seconds)')
plt.ylabel('Newtons')
plt.title('Sum of all Reaction forces')
plt.show()